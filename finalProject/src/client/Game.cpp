// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Game.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Game.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_Game_GameState_ids[2] =
{
    "::Game::GameState",
    "::Ice::Object"
};
const ::std::string iceC_Game_GameState_ops[] =
{
    "AddPlayer",
    "CheckWord",
    "DrawColors",
    "DrawLines",
    "GetColors",
    "GetGameInfo",
    "GetLines",
    "GetNumPlayers",
    "GetPlayers",
    "GetScore",
    "IncrementScore",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "printString"
};
const ::std::string iceC_Game_GameState_printString_name = "printString";
const ::std::string iceC_Game_GameState_AddPlayer_name = "AddPlayer";
const ::std::string iceC_Game_GameState_IncrementScore_name = "IncrementScore";
const ::std::string iceC_Game_GameState_GetScore_name = "GetScore";
const ::std::string iceC_Game_GameState_GetNumPlayers_name = "GetNumPlayers";
const ::std::string iceC_Game_GameState_GetGameInfo_name = "GetGameInfo";
const ::std::string iceC_Game_GameState_GetLines_name = "GetLines";
const ::std::string iceC_Game_GameState_DrawLines_name = "DrawLines";
const ::std::string iceC_Game_GameState_GetColors_name = "GetColors";
const ::std::string iceC_Game_GameState_DrawColors_name = "DrawColors";
const ::std::string iceC_Game_GameState_CheckWord_name = "CheckWord";
const ::std::string iceC_Game_GameState_GetPlayers_name = "GetPlayers";

}

bool
Game::GameState::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Game_GameState_ids, iceC_Game_GameState_ids + 2, s);
}

::std::vector<::std::string>
Game::GameState::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Game_GameState_ids[0], &iceC_Game_GameState_ids[2]);
}

::std::string
Game::GameState::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Game::GameState::ice_staticId()
{
    static const ::std::string typeId = "::Game::GameState";
    return typeId;
}

/// \cond INTERNAL
bool
Game::GameState::_iceD_printString(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_s;
    istr->readAll(iceP_s);
    inS.endReadParams();
    this->printString(::std::move(iceP_s), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_AddPlayer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    int ret = this->AddPlayer(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_IncrementScore(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    this->IncrementScore(iceP_id, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_GetScore(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    int ret = this->GetScore(iceP_id, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_GetNumPlayers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int ret = this->GetNumPlayers(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_GetGameInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    GameInfo ret = this->GetGameInfo(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_GetLines(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    LineVector ret = this->GetLines(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_DrawLines(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    LineVector iceP_lines;
    istr->readAll(iceP_lines);
    inS.endReadParams();
    this->DrawLines(::std::move(iceP_lines), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_GetColors(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ColorVector ret = this->GetColors(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_DrawColors(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ColorVector iceP_colors;
    istr->readAll(iceP_colors);
    inS.endReadParams();
    this->DrawColors(::std::move(iceP_colors), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_CheckWord(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_word;
    int iceP_id;
    istr->readAll(iceP_word, iceP_id);
    inS.endReadParams();
    bool ret = this->CheckWord(::std::move(iceP_word), iceP_id, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_GetPlayers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    Players ret = this->GetPlayers(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Game_GameState_ops, iceC_Game_GameState_ops + 16, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Game_GameState_ops)
    {
        case 0:
        {
            return _iceD_AddPlayer(in, current);
        }
        case 1:
        {
            return _iceD_CheckWord(in, current);
        }
        case 2:
        {
            return _iceD_DrawColors(in, current);
        }
        case 3:
        {
            return _iceD_DrawLines(in, current);
        }
        case 4:
        {
            return _iceD_GetColors(in, current);
        }
        case 5:
        {
            return _iceD_GetGameInfo(in, current);
        }
        case 6:
        {
            return _iceD_GetLines(in, current);
        }
        case 7:
        {
            return _iceD_GetNumPlayers(in, current);
        }
        case 8:
        {
            return _iceD_GetPlayers(in, current);
        }
        case 9:
        {
            return _iceD_GetScore(in, current);
        }
        case 10:
        {
            return _iceD_IncrementScore(in, current);
        }
        case 11:
        {
            return _iceD_ice_id(in, current);
        }
        case 12:
        {
            return _iceD_ice_ids(in, current);
        }
        case 13:
        {
            return _iceD_ice_isA(in, current);
        }
        case 14:
        {
            return _iceD_ice_ping(in, current);
        }
        case 15:
        {
            return _iceD_printString(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Game::GameStatePrx::_iceI_printString(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_s, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Game_GameState_printString_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Game::GameStatePrx::_iceI_AddPlayer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Game_GameState_AddPlayer_name);
    outAsync->invoke(iceC_Game_GameState_AddPlayer_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Game::GameStatePrx::_iceI_IncrementScore(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, int iceP_id, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Game_GameState_IncrementScore_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Game::GameStatePrx::_iceI_GetScore(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, int iceP_id, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Game_GameState_GetScore_name);
    outAsync->invoke(iceC_Game_GameState_GetScore_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Game::GameStatePrx::_iceI_GetNumPlayers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Game_GameState_GetNumPlayers_name);
    outAsync->invoke(iceC_Game_GameState_GetNumPlayers_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Game::GameStatePrx::_iceI_GetGameInfo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<GameInfo>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Game_GameState_GetGameInfo_name);
    outAsync->invoke(iceC_Game_GameState_GetGameInfo_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Game::GameStatePrx::_iceI_GetLines(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<LineVector>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Game_GameState_GetLines_name);
    outAsync->invoke(iceC_Game_GameState_GetLines_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Game::GameStatePrx::_iceI_DrawLines(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const LineVector& iceP_lines, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Game_GameState_DrawLines_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_lines);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Game::GameStatePrx::_iceI_GetColors(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<ColorVector>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Game_GameState_GetColors_name);
    outAsync->invoke(iceC_Game_GameState_GetColors_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Game::GameStatePrx::_iceI_DrawColors(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ColorVector& iceP_colors, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Game_GameState_DrawColors_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_colors);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Game::GameStatePrx::_iceI_CheckWord(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_word, int iceP_id, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Game_GameState_CheckWord_name);
    outAsync->invoke(iceC_Game_GameState_CheckWord_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_word, iceP_id);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Game::GameStatePrx::_iceI_GetPlayers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Players>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Game_GameState_GetPlayers_name);
    outAsync->invoke(iceC_Game_GameState_GetPlayers_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Game::GameStatePrx::_newInstance() const
{
    return ::IceInternal::createProxy<GameStatePrx>();
}
/// \endcond

const ::std::string&
Game::GameStatePrx::ice_staticId()
{
    return GameState::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Game_GameState_printString_name = "printString";

const ::std::string iceC_Game_GameState_AddPlayer_name = "AddPlayer";

const ::std::string iceC_Game_GameState_IncrementScore_name = "IncrementScore";

const ::std::string iceC_Game_GameState_GetScore_name = "GetScore";

const ::std::string iceC_Game_GameState_GetNumPlayers_name = "GetNumPlayers";

const ::std::string iceC_Game_GameState_GetGameInfo_name = "GetGameInfo";

const ::std::string iceC_Game_GameState_GetLines_name = "GetLines";

const ::std::string iceC_Game_GameState_DrawLines_name = "DrawLines";

const ::std::string iceC_Game_GameState_GetColors_name = "GetColors";

const ::std::string iceC_Game_GameState_DrawColors_name = "DrawColors";

const ::std::string iceC_Game_GameState_CheckWord_name = "CheckWord";

const ::std::string iceC_Game_GameState_GetPlayers_name = "GetPlayers";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Game::upCast(GameState* p) { return p; }

void
::IceProxy::Game::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< GameState>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new GameState;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Game::GameState::_iceI_begin_printString(const ::std::string& iceP_s, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Game_GameState_printString_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Game_GameState_printString_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s);
        result->endWriteParams();
        result->invoke(iceC_Game_GameState_printString_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Game::GameState::end_printString(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Game_GameState_printString_name);
}

::Ice::AsyncResultPtr
IceProxy::Game::GameState::_iceI_begin_AddPlayer(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Game_GameState_AddPlayer_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Game_GameState_AddPlayer_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Game_GameState_AddPlayer_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Game_GameState_AddPlayer_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Game::GameState::end_AddPlayer(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Game_GameState_AddPlayer_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Game::GameState::_iceI_begin_IncrementScore(::Ice::Int iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Game_GameState_IncrementScore_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Game_GameState_IncrementScore_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Game_GameState_IncrementScore_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Game::GameState::end_IncrementScore(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Game_GameState_IncrementScore_name);
}

::Ice::AsyncResultPtr
IceProxy::Game::GameState::_iceI_begin_GetScore(::Ice::Int iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Game_GameState_GetScore_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Game_GameState_GetScore_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Game_GameState_GetScore_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Game_GameState_GetScore_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Game::GameState::end_GetScore(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Game_GameState_GetScore_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Game::GameState::_iceI_begin_GetNumPlayers(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Game_GameState_GetNumPlayers_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Game_GameState_GetNumPlayers_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Game_GameState_GetNumPlayers_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Game_GameState_GetNumPlayers_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Game::GameState::end_GetNumPlayers(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Game_GameState_GetNumPlayers_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Game::GameState::_iceI_begin_GetGameInfo(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Game_GameState_GetGameInfo_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Game_GameState_GetGameInfo_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Game_GameState_GetGameInfo_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Game_GameState_GetGameInfo_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Game::GameInfo
IceProxy::Game::GameState::end_GetGameInfo(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Game_GameState_GetGameInfo_name);
    ::Game::GameInfo ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Game::GameState::_iceI_begin_GetLines(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Game_GameState_GetLines_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Game_GameState_GetLines_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Game_GameState_GetLines_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Game_GameState_GetLines_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Game::LineVector
IceProxy::Game::GameState::end_GetLines(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Game_GameState_GetLines_name);
    ::Game::LineVector ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Game::GameState::_iceI_begin_DrawLines(const ::Game::LineVector& iceP_lines, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Game_GameState_DrawLines_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Game_GameState_DrawLines_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_lines);
        result->endWriteParams();
        result->invoke(iceC_Game_GameState_DrawLines_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Game::GameState::end_DrawLines(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Game_GameState_DrawLines_name);
}

::Ice::AsyncResultPtr
IceProxy::Game::GameState::_iceI_begin_GetColors(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Game_GameState_GetColors_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Game_GameState_GetColors_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Game_GameState_GetColors_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Game_GameState_GetColors_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Game::ColorVector
IceProxy::Game::GameState::end_GetColors(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Game_GameState_GetColors_name);
    ::Game::ColorVector ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Game::GameState::_iceI_begin_DrawColors(const ::Game::ColorVector& iceP_colors, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Game_GameState_DrawColors_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Game_GameState_DrawColors_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_colors);
        result->endWriteParams();
        result->invoke(iceC_Game_GameState_DrawColors_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Game::GameState::end_DrawColors(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Game_GameState_DrawColors_name);
}

::Ice::AsyncResultPtr
IceProxy::Game::GameState::_iceI_begin_CheckWord(const ::std::string& iceP_word, ::Ice::Int iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Game_GameState_CheckWord_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Game_GameState_CheckWord_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Game_GameState_CheckWord_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_word);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Game_GameState_CheckWord_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Game::GameState::end_CheckWord(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Game_GameState_CheckWord_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Game::GameState::_iceI_begin_GetPlayers(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Game_GameState_GetPlayers_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Game_GameState_GetPlayers_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Game_GameState_GetPlayers_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Game_GameState_GetPlayers_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Game::Players
IceProxy::Game::GameState::end_GetPlayers(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Game_GameState_GetPlayers_name);
    ::Game::Players ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Game::GameState::_newInstance() const
{
    return new GameState;
}
/// \endcond

const ::std::string&
IceProxy::Game::GameState::ice_staticId()
{
    return ::Game::GameState::ice_staticId();
}

Game::GameState::~GameState()
{
}

/// \cond INTERNAL
::Ice::Object* Game::upCast(GameState* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Game_GameState_ids[2] =
{
    "::Game::GameState",
    "::Ice::Object"
};

}

bool
Game::GameState::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Game_GameState_ids, iceC_Game_GameState_ids + 2, s);
}

::std::vector< ::std::string>
Game::GameState::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Game_GameState_ids[0], &iceC_Game_GameState_ids[2]);
}

const ::std::string&
Game::GameState::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Game::GameState::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Game::GameState";
    return typeId;
#else
    return iceC_Game_GameState_ids[0];
#endif
}

/// \cond INTERNAL
bool
Game::GameState::_iceD_printString(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_s;
    istr->read(iceP_s);
    inS.endReadParams();
    this->printString(iceP_s, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_AddPlayer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    ::Ice::Int ret = this->AddPlayer(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_IncrementScore(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->IncrementScore(iceP_id, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_GetScore(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    ::Ice::Int ret = this->GetScore(iceP_id, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_GetNumPlayers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->GetNumPlayers(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_GetGameInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    GameInfo ret = this->GetGameInfo(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_GetLines(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    LineVector ret = this->GetLines(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_DrawLines(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    LineVector iceP_lines;
    istr->read(iceP_lines);
    inS.endReadParams();
    this->DrawLines(iceP_lines, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_GetColors(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ColorVector ret = this->GetColors(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_DrawColors(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ColorVector iceP_colors;
    istr->read(iceP_colors);
    inS.endReadParams();
    this->DrawColors(iceP_colors, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_CheckWord(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_word;
    ::Ice::Int iceP_id;
    istr->read(iceP_word);
    istr->read(iceP_id);
    inS.endReadParams();
    bool ret = this->CheckWord(iceP_word, iceP_id, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Game::GameState::_iceD_GetPlayers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    Players ret = this->GetPlayers(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Game_GameState_all[] =
{
    "AddPlayer",
    "CheckWord",
    "DrawColors",
    "DrawLines",
    "GetColors",
    "GetGameInfo",
    "GetLines",
    "GetNumPlayers",
    "GetPlayers",
    "GetScore",
    "IncrementScore",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "printString"
};

}

/// \cond INTERNAL
bool
Game::GameState::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Game_GameState_all, iceC_Game_GameState_all + 16, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Game_GameState_all)
    {
        case 0:
        {
            return _iceD_AddPlayer(in, current);
        }
        case 1:
        {
            return _iceD_CheckWord(in, current);
        }
        case 2:
        {
            return _iceD_DrawColors(in, current);
        }
        case 3:
        {
            return _iceD_DrawLines(in, current);
        }
        case 4:
        {
            return _iceD_GetColors(in, current);
        }
        case 5:
        {
            return _iceD_GetGameInfo(in, current);
        }
        case 6:
        {
            return _iceD_GetLines(in, current);
        }
        case 7:
        {
            return _iceD_GetNumPlayers(in, current);
        }
        case 8:
        {
            return _iceD_GetPlayers(in, current);
        }
        case 9:
        {
            return _iceD_GetScore(in, current);
        }
        case 10:
        {
            return _iceD_IncrementScore(in, current);
        }
        case 11:
        {
            return _iceD_ice_id(in, current);
        }
        case 12:
        {
            return _iceD_ice_ids(in, current);
        }
        case 13:
        {
            return _iceD_ice_isA(in, current);
        }
        case 14:
        {
            return _iceD_ice_ping(in, current);
        }
        case 15:
        {
            return _iceD_printString(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Game::GameState::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< GameState, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Game::GameState::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< GameState, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Game::_icePatchObjectPtr(GameStatePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = GameStatePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(GameState::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
